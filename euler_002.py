#!/usr/bin/env python

"""
Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
Find the sum of all the even-valued terms in the sequence which do not exceed four million.
"""

import sys
from numpy import sqrt

def calcE():
    """
    Every third element in the Fibonacci sequence is even.
    """
    x = y = 1
    sum = 0
    while (sum < 1000000):
        sum += (x + y)
        x, y = x+2*y, 2*x+3*y
    return sum

def orig():
    """
    My original attempt at solving problem #2.
    """
    fib = [1,2,3]
    sum = 2
    while fib[2] < 4e6:
        del fib[0]
        fib.append(fib[0]+fib[1])
        if fib[2]%2==0:
            sum+=fib[2]
    return sum

def main():
    """
    Print the sum of all even-valued terms in Fibonacci sequence less than four million.
    """
    print 'sum = ',orig()

if __name__ == "__main__":
	sys.exit(main())

